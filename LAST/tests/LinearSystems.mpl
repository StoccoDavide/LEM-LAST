
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#                           _        _    ____ _____                          #
#                          | |      / \  / ___|_   _|                         #
#                          | |     / _ \ \___ \ | |                           #
#                          | |___ / ___ \ ___) || |                           #
#                          |_____/_/   \_\____/ |_|                           #
#                       Linear Algebra Symbolic Toolbox                       #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# Linear system 3 x 3
A3 := Matrix(3, 3, [[4, 2/3, 3/3], [4/3, 18, 6/3], [7/3, 8/3, 10]]):
B3 = Vector[column](3, [1, 2, 3]):

# Linear system 24 x 24
A24 := Matrix(24, 24, [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, -1.0000000000*L_beam, 0, 1, 0, 0, 0, -0.7000000000*L_beam, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, L_beam, 0, 0, 0, 1, 0, 0.7000000000*L_beam, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]):
B24 := Vector[column](24, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -Fx, -Fy, -Fz, 0, 0, 0]):

# Linear system 44 x 44
A44 := Matrix(44, 44, [[-1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exy_UR_Rod, eyy_UR_Rod, ezy_UR_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exz_UR_Rod, eyz_UR_Rod, ezz_UR_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_Carrier*exx_LF_Rod + eyx_Carrier*eyx_LF_Rod + ezx_Carrier*ezx_LF_Rod, exx_LF_Rod*exy_Carrier + eyx_LF_Rod*eyy_Carrier + ezx_LF_Rod*ezy_Carrier, exx_LF_Rod*exz_Carrier + eyx_LF_Rod*eyz_Carrier + ezx_LF_Rod*ezz_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_LF_Rod, eyx_LF_Rod, ezx_LF_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_LR_Rod, eyx_LR_Rod, ezx_LR_Rod, 0, 0, 0, exx_Carrier*exx_LR_Rod + eyx_Carrier*eyx_LR_Rod + ezx_Carrier*ezx_LR_Rod, exx_LR_Rod*exy_Carrier + eyx_LR_Rod*eyy_Carrier + ezx_LR_Rod*ezy_Carrier, exx_LR_Rod*exz_Carrier + eyx_LR_Rod*eyz_Carrier + ezx_LR_Rod*ezz_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_Carrier*exx_UF_Rod + eyx_Carrier*eyx_UF_Rod + ezx_Carrier*ezx_UF_Rod, exx_UF_Rod*exy_Carrier + eyx_UF_Rod*eyy_Carrier + ezx_UF_Rod*ezy_Carrier, exx_UF_Rod*exz_Carrier + eyx_UF_Rod*eyz_Carrier + ezx_UF_Rod*ezz_Carrier, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_UR_Rod, eyx_UR_Rod, ezx_UR_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_Carrier*exx_UR_Rod + eyx_Carrier*eyx_UR_Rod + ezx_Carrier*ezx_UR_Rod, exx_UR_Rod*exy_Carrier + eyx_UR_Rod*eyy_Carrier + ezx_UR_Rod*ezy_Carrier, exx_UR_Rod*exz_Carrier + eyx_UR_Rod*eyz_Carrier + ezx_UR_Rod*ezz_Carrier, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exy_LR_Rod, eyy_LR_Rod, ezy_LR_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exz_LR_Rod, eyz_LR_Rod, ezz_LR_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, ezx_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, ezy_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, ezz_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_Carrier*exy_LF_Rod + eyx_Carrier*eyy_LF_Rod + ezx_Carrier*ezy_LF_Rod, exy_Carrier*exy_LF_Rod + eyy_Carrier*eyy_LF_Rod + ezy_Carrier*ezy_LF_Rod, exy_LF_Rod*exz_Carrier + eyy_LF_Rod*eyz_Carrier + ezy_LF_Rod*ezz_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_Carrier*exz_LF_Rod + eyx_Carrier*eyz_LF_Rod + ezx_Carrier*ezz_LF_Rod, exy_Carrier*exz_LF_Rod + eyy_Carrier*eyz_LF_Rod + ezy_Carrier*ezz_LF_Rod, exz_Carrier*exz_LF_Rod + eyz_Carrier*eyz_LF_Rod + ezz_Carrier*ezz_LF_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_Carrier*exy_LR_Rod + eyx_Carrier*eyy_LR_Rod + ezx_Carrier*ezy_LR_Rod, exy_Carrier*exy_LR_Rod + eyy_Carrier*eyy_LR_Rod + ezy_Carrier*ezy_LR_Rod, exy_LR_Rod*exz_Carrier + eyy_LR_Rod*eyz_Carrier + ezy_LR_Rod*ezz_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_Carrier*exz_LR_Rod + eyx_Carrier*eyz_LR_Rod + ezx_Carrier*ezz_LR_Rod, exy_Carrier*exz_LR_Rod + eyy_Carrier*eyz_LR_Rod + ezy_Carrier*ezz_LR_Rod, exz_Carrier*exz_LR_Rod + eyz_Carrier*eyz_LR_Rod + ezz_Carrier*ezz_LR_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exy_LF_Rod, eyy_LF_Rod, ezy_LF_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exz_LF_Rod, eyz_LF_Rod, ezz_LF_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_Carrier*exy_UF_Rod + eyx_Carrier*eyy_UF_Rod + ezx_Carrier*ezy_UF_Rod, exy_Carrier*exy_UF_Rod + eyy_Carrier*eyy_UF_Rod + ezy_Carrier*ezy_UF_Rod, exy_UF_Rod*exz_Carrier + eyy_UF_Rod*eyz_Carrier + ezy_UF_Rod*ezz_Carrier, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_Carrier*exz_UF_Rod + eyx_Carrier*eyz_UF_Rod + ezx_Carrier*ezz_UF_Rod, exy_Carrier*exz_UF_Rod + eyy_Carrier*eyz_UF_Rod + ezy_Carrier*ezz_UF_Rod, exz_Carrier*exz_UF_Rod + eyz_Carrier*eyz_UF_Rod + ezz_Carrier*ezz_UF_Rod, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_Carrier*exy_UR_Rod + eyx_Carrier*eyy_UR_Rod + ezx_Carrier*ezy_UR_Rod, exy_Carrier*exy_UR_Rod + eyy_Carrier*eyy_UR_Rod + ezy_Carrier*ezy_UR_Rod, exy_UR_Rod*exz_Carrier + eyy_UR_Rod*eyz_Carrier + ezy_UR_Rod*ezz_Carrier, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_Carrier*exz_UR_Rod + eyx_Carrier*eyz_UR_Rod + ezx_Carrier*ezz_UR_Rod, exy_Carrier*exz_UR_Rod + eyy_Carrier*eyz_UR_Rod + ezy_Carrier*ezz_UR_Rod, exz_Carrier*exz_UR_Rod + eyz_Carrier*eyz_UR_Rod + ezz_Carrier*ezz_UR_Rod, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]);
B44 := Vector[column](44, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(F_x + dFx_1)*exx_Carrier - (F_y + dFy_1)*eyx_Carrier - (F_z + dFz_1)*ezx_Carrier, -(F_x + dFx_1)*exy_Carrier - (F_y + dFy_1)*eyy_Carrier - (F_z + dFz_1)*ezy_Carrier, -(F_x + dFx_1)*exz_Carrier - (F_y + dFy_1)*eyz_Carrier - (F_z + dFz_1)*ezz_Carrier, 0, 0, 0, 0, 0, 0]);

# Linear system 66 x 66
A66 := Matrix(66, 66, [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exy_Tie_Rod, eyy_Tie_Rod, ezy_Tie_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exz_Tie_Rod, eyz_Tie_Rod, ezz_Tie_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exy_LF_Rod, eyy_LF_Rod, ezy_LF_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exz_LF_Rod, eyz_LF_Rod, ezz_LF_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, exy_Push_Rod, eyy_Push_Rod, ezy_Push_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, exz_Push_Rod, eyz_Push_Rod, ezz_Push_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [exy_LF_Rod, eyy_LF_Rod, ezy_LF_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [exz_LF_Rod, eyz_LF_Rod, ezz_LF_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, exy_LR_Rod, eyy_LR_Rod, ezy_LR_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, exz_LR_Rod, eyz_LR_Rod, ezz_LR_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_Tie_Rod, eyx_Tie_Rod, ezx_Tie_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_Tie_Rod, eyx_Tie_Rod, ezx_Tie_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, exx_Push_Rod, eyx_Push_Rod, ezx_Push_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_Push_Rod, eyx_Push_Rod, ezx_Push_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, exx_Carrier, eyx_Carrier, ezx_Carrier, 0, 0, 0, exx_Carrier, eyx_Carrier, ezx_Carrier, 0, 0, 0, exx_Carrier, eyx_Carrier, ezx_Carrier, 0, 0, 0, 0, 0, 0, exx_Carrier, eyx_Carrier, ezx_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, exy_Carrier, eyy_Carrier, ezy_Carrier, 0, 0, 0, exy_Carrier, eyy_Carrier, ezy_Carrier, 0, 0, 0, exy_Carrier, eyy_Carrier, ezy_Carrier, 0, 0, 0, 0, 0, 0, exy_Carrier, eyy_Carrier, ezy_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, exz_Carrier, eyz_Carrier, ezz_Carrier, 0, 0, 0, exz_Carrier, eyz_Carrier, ezz_Carrier, 0, 0, 0, exz_Carrier, eyz_Carrier, ezz_Carrier, 0, 0, 0, 0, 0, 0, exz_Carrier, eyz_Carrier, ezz_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, ((pyy_Carrier - pt_7_y)*eyz_Carrier - (pt_7_z - pzz_Carrier)*ezz_Carrier)*exy_Carrier + ((pt_7_y - pyy_Carrier)*eyy_Carrier + (pt_7_z - pzz_Carrier)*ezy_Carrier)*exz_Carrier, (pt_7_x - pxx_Carrier)*eyz_Carrier*exy_Carrier + (pxx_Carrier - pt_7_x)*eyy_Carrier*exz_Carrier - (pt_7_z - pzz_Carrier)*ezz_Carrier*eyy_Carrier + (pt_7_z - pzz_Carrier)*ezy_Carrier*eyz_Carrier, -(pxx_Carrier - pt_7_x)*ezz_Carrier*exy_Carrier + (pxx_Carrier - pt_7_x)*ezy_Carrier*exz_Carrier - ezz_Carrier*(pyy_Carrier - pt_7_y)*eyy_Carrier + (pyy_Carrier - pt_7_y)*ezy_Carrier*eyz_Carrier, 0, 0, 0, ((pyy_Carrier - pt_11_y)*eyz_Carrier - (pt_11_z - pzz_Carrier)*ezz_Carrier)*exy_Carrier + ((pt_11_y - pyy_Carrier)*eyy_Carrier + (pt_11_z - pzz_Carrier)*ezy_Carrier)*exz_Carrier, (pt_11_x - pxx_Carrier)*eyz_Carrier*exy_Carrier + (pxx_Carrier - pt_11_x)*eyy_Carrier*exz_Carrier - (pt_11_z - pzz_Carrier)*ezz_Carrier*eyy_Carrier + (pt_11_z - pzz_Carrier)*ezy_Carrier*eyz_Carrier, -(pxx_Carrier - pt_11_x)*ezz_Carrier*exy_Carrier + (pxx_Carrier - pt_11_x)*ezy_Carrier*exz_Carrier - ezz_Carrier*(pyy_Carrier - pt_11_y)*eyy_Carrier + (pyy_Carrier - pt_11_y)*ezy_Carrier*eyz_Carrier, 0, 0, 0, ((pyy_Carrier - pt_8_y)*eyz_Carrier - (pt_8_z - pzz_Carrier)*ezz_Carrier)*exy_Carrier + ((pt_8_y - pyy_Carrier)*eyy_Carrier + (pt_8_z - pzz_Carrier)*ezy_Carrier)*exz_Carrier, (pt_8_x - pxx_Carrier)*eyz_Carrier*exy_Carrier + (pxx_Carrier - pt_8_x)*eyy_Carrier*exz_Carrier - (pt_8_z - pzz_Carrier)*ezz_Carrier*eyy_Carrier + (pt_8_z - pzz_Carrier)*ezy_Carrier*eyz_Carrier, -(pxx_Carrier - pt_8_x)*ezz_Carrier*exy_Carrier + (pxx_Carrier - pt_8_x)*ezy_Carrier*exz_Carrier - ezz_Carrier*(pyy_Carrier - pt_8_y)*eyy_Carrier + (pyy_Carrier - pt_8_y)*ezy_Carrier*eyz_Carrier, 0, 0, 0, 0, 0, 0, ((-pt_6_y + pyy_Carrier)*eyz_Carrier - (pt_6_z - pzz_Carrier)*ezz_Carrier)*exy_Carrier + ((pt_6_y - pyy_Carrier)*eyy_Carrier + (pt_6_z - pzz_Carrier)*ezy_Carrier)*exz_Carrier, (pt_6_x - pxx_Carrier)*eyz_Carrier*exy_Carrier + (-pt_6_x + pxx_Carrier)*eyy_Carrier*exz_Carrier - (pt_6_z - pzz_Carrier)*ezz_Carrier*eyy_Carrier + (pt_6_z - pzz_Carrier)*ezy_Carrier*eyz_Carrier, -(-pt_6_x + pxx_Carrier)*ezz_Carrier*exy_Carrier + (-pt_6_x + pxx_Carrier)*ezy_Carrier*exz_Carrier - ezz_Carrier*(-pt_6_y + pyy_Carrier)*eyy_Carrier + (-pt_6_y + pyy_Carrier)*ezy_Carrier*eyz_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, ((pt_7_y - pyy_Carrier)*eyz_Carrier + (pt_7_z - pzz_Carrier)*ezz_Carrier)*exx_Carrier + ((pyy_Carrier - pt_7_y)*eyx_Carrier - (pt_7_z - pzz_Carrier)*ezx_Carrier)*exz_Carrier, (pxx_Carrier - pt_7_x)*eyz_Carrier*exx_Carrier + (pt_7_x - pxx_Carrier)*eyx_Carrier*exz_Carrier + (pt_7_z - pzz_Carrier)*ezz_Carrier*eyx_Carrier - (pt_7_z - pzz_Carrier)*ezx_Carrier*eyz_Carrier, (pxx_Carrier - pt_7_x)*ezz_Carrier*exx_Carrier - (pxx_Carrier - pt_7_x)*ezx_Carrier*exz_Carrier + ezz_Carrier*(pyy_Carrier - pt_7_y)*eyx_Carrier - (pyy_Carrier - pt_7_y)*ezx_Carrier*eyz_Carrier, 0, 0, 0, ((pt_11_y - pyy_Carrier)*eyz_Carrier + (pt_11_z - pzz_Carrier)*ezz_Carrier)*exx_Carrier + ((pyy_Carrier - pt_11_y)*eyx_Carrier - (pt_11_z - pzz_Carrier)*ezx_Carrier)*exz_Carrier, (pxx_Carrier - pt_11_x)*eyz_Carrier*exx_Carrier + (pt_11_x - pxx_Carrier)*eyx_Carrier*exz_Carrier + (pt_11_z - pzz_Carrier)*ezz_Carrier*eyx_Carrier - (pt_11_z - pzz_Carrier)*ezx_Carrier*eyz_Carrier, (pxx_Carrier - pt_11_x)*ezz_Carrier*exx_Carrier - (pxx_Carrier - pt_11_x)*ezx_Carrier*exz_Carrier + ezz_Carrier*(pyy_Carrier - pt_11_y)*eyx_Carrier - (pyy_Carrier - pt_11_y)*ezx_Carrier*eyz_Carrier, 0, 0, 0, ((pt_8_y - pyy_Carrier)*eyz_Carrier + (pt_8_z - pzz_Carrier)*ezz_Carrier)*exx_Carrier + ((pyy_Carrier - pt_8_y)*eyx_Carrier - (pt_8_z - pzz_Carrier)*ezx_Carrier)*exz_Carrier, (pxx_Carrier - pt_8_x)*eyz_Carrier*exx_Carrier + (pt_8_x - pxx_Carrier)*eyx_Carrier*exz_Carrier + (pt_8_z - pzz_Carrier)*ezz_Carrier*eyx_Carrier - (pt_8_z - pzz_Carrier)*ezx_Carrier*eyz_Carrier, (pxx_Carrier - pt_8_x)*ezz_Carrier*exx_Carrier - (pxx_Carrier - pt_8_x)*ezx_Carrier*exz_Carrier + ezz_Carrier*(pyy_Carrier - pt_8_y)*eyx_Carrier - (pyy_Carrier - pt_8_y)*ezx_Carrier*eyz_Carrier, 0, 0, 0, 0, 0, 0, ((pt_6_y - pyy_Carrier)*eyz_Carrier + (pt_6_z - pzz_Carrier)*ezz_Carrier)*exx_Carrier + ((-pt_6_y + pyy_Carrier)*eyx_Carrier - (pt_6_z - pzz_Carrier)*ezx_Carrier)*exz_Carrier, (-pt_6_x + pxx_Carrier)*eyz_Carrier*exx_Carrier + (pt_6_x - pxx_Carrier)*eyx_Carrier*exz_Carrier + (pt_6_z - pzz_Carrier)*ezz_Carrier*eyx_Carrier - (pt_6_z - pzz_Carrier)*ezx_Carrier*eyz_Carrier, (-pt_6_x + pxx_Carrier)*ezz_Carrier*exx_Carrier - (-pt_6_x + pxx_Carrier)*ezx_Carrier*exz_Carrier + ezz_Carrier*(-pt_6_y + pyy_Carrier)*eyx_Carrier - (-pt_6_y + pyy_Carrier)*ezx_Carrier*eyz_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, ((pyy_Carrier - pt_7_y)*eyy_Carrier - (pt_7_z - pzz_Carrier)*ezy_Carrier)*exx_Carrier + ((pt_7_y - pyy_Carrier)*eyx_Carrier + (pt_7_z - pzz_Carrier)*ezx_Carrier)*exy_Carrier, (pt_7_x - pxx_Carrier)*eyy_Carrier*exx_Carrier + (pxx_Carrier - pt_7_x)*eyx_Carrier*exy_Carrier - (pt_7_z - pzz_Carrier)*ezy_Carrier*eyx_Carrier + (pt_7_z - pzz_Carrier)*ezx_Carrier*eyy_Carrier, -(pxx_Carrier - pt_7_x)*ezy_Carrier*exx_Carrier + (pxx_Carrier - pt_7_x)*ezx_Carrier*exy_Carrier - (pyy_Carrier - pt_7_y)*ezy_Carrier*eyx_Carrier + (pyy_Carrier - pt_7_y)*ezx_Carrier*eyy_Carrier, 0, 0, 0, ((pyy_Carrier - pt_11_y)*eyy_Carrier - (pt_11_z - pzz_Carrier)*ezy_Carrier)*exx_Carrier + ((pt_11_y - pyy_Carrier)*eyx_Carrier + (pt_11_z - pzz_Carrier)*ezx_Carrier)*exy_Carrier, (pt_11_x - pxx_Carrier)*eyy_Carrier*exx_Carrier + (pxx_Carrier - pt_11_x)*eyx_Carrier*exy_Carrier - (pt_11_z - pzz_Carrier)*ezy_Carrier*eyx_Carrier + (pt_11_z - pzz_Carrier)*ezx_Carrier*eyy_Carrier, -(pxx_Carrier - pt_11_x)*ezy_Carrier*exx_Carrier + (pxx_Carrier - pt_11_x)*ezx_Carrier*exy_Carrier - (pyy_Carrier - pt_11_y)*ezy_Carrier*eyx_Carrier + (pyy_Carrier - pt_11_y)*ezx_Carrier*eyy_Carrier, 0, 0, 0, ((pyy_Carrier - pt_8_y)*eyy_Carrier - (pt_8_z - pzz_Carrier)*ezy_Carrier)*exx_Carrier + ((pt_8_y - pyy_Carrier)*eyx_Carrier + (pt_8_z - pzz_Carrier)*ezx_Carrier)*exy_Carrier, (pt_8_x - pxx_Carrier)*eyy_Carrier*exx_Carrier + (pxx_Carrier - pt_8_x)*eyx_Carrier*exy_Carrier - (pt_8_z - pzz_Carrier)*ezy_Carrier*eyx_Carrier + (pt_8_z - pzz_Carrier)*ezx_Carrier*eyy_Carrier, -(pxx_Carrier - pt_8_x)*ezy_Carrier*exx_Carrier + (pxx_Carrier - pt_8_x)*ezx_Carrier*exy_Carrier - (pyy_Carrier - pt_8_y)*ezy_Carrier*eyx_Carrier + (pyy_Carrier - pt_8_y)*ezx_Carrier*eyy_Carrier, 0, 0, 0, 0, 0, 0, ((-pt_6_y + pyy_Carrier)*eyy_Carrier - (pt_6_z - pzz_Carrier)*ezy_Carrier)*exx_Carrier + ((pt_6_y - pyy_Carrier)*eyx_Carrier + (pt_6_z - pzz_Carrier)*ezx_Carrier)*exy_Carrier, (pt_6_x - pxx_Carrier)*eyy_Carrier*exx_Carrier + (-pt_6_x + pxx_Carrier)*eyx_Carrier*exy_Carrier - (pt_6_z - pzz_Carrier)*ezy_Carrier*eyx_Carrier + (pt_6_z - pzz_Carrier)*ezx_Carrier*eyy_Carrier, -(-pt_6_x + pxx_Carrier)*ezy_Carrier*exx_Carrier + (-pt_6_x + pxx_Carrier)*ezx_Carrier*exy_Carrier - (-pt_6_y + pyy_Carrier)*ezy_Carrier*eyx_Carrier + (-pt_6_y + pyy_Carrier)*ezx_Carrier*eyy_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_UF_Rod, eyx_UF_Rod, ezx_UF_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_UF_Rod, eyx_UF_Rod, ezx_UF_Rod, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exy_Tie_Rod, eyy_Tie_Rod, ezy_Tie_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exz_Tie_Rod, eyz_Tie_Rod, ezz_Tie_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_UR_Rod, eyx_UR_Rod, ezx_UR_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_UR_Rod, eyx_UR_Rod, ezx_UR_Rod], [exx_LF_Rod, eyx_LF_Rod, ezx_LF_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_LF_Rod, eyx_LF_Rod, ezx_LF_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, exx_LR_Rod, eyx_LR_Rod, ezx_LR_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_LR_Rod, eyx_LR_Rod, ezx_LR_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exy_LR_Rod, eyy_LR_Rod, ezy_LR_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exz_LR_Rod, eyz_LR_Rod, ezz_LR_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exy_UF_Rod, eyy_UF_Rod, ezy_UF_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exz_UF_Rod, eyz_UF_Rod, ezz_UF_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exy_UR_Rod, eyy_UR_Rod, ezy_UR_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exz_UR_Rod, eyz_UR_Rod, ezz_UR_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exy_Push_Rod, eyy_Push_Rod, ezy_Push_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exz_Push_Rod, eyz_Push_Rod, ezz_Push_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exy_UF_Rod, eyy_UF_Rod, ezy_UF_Rod, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exz_UF_Rod, eyz_UF_Rod, ezz_UF_Rod, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exy_UR_Rod, eyy_UR_Rod, ezy_UR_Rod], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exz_UR_Rod, eyz_UR_Rod, ezz_UR_Rod]]);
B66 := Vector[column](66, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -F_x, -F_y, -F_z, -M_x, -M_y, -M_z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);

# Linear system 66 x 66
A66N := Matrix(66, 66, [[-1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.477771946800000, 0.878483902200000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.477771946800000, 0.878483902200000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.875363194400000, -0.476074719800000, -0.0842148256200000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.875363194400000, -0.476074719800000, -0.0842148256200000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0739813686400000, -0.0402354811900000, 0.996447620500000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0739813686400000, -0.0402354811900000, 0.996447620500000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24.0012253024180, 13.0532979714336, -323.270091934309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -283.987571958478, -154.449381253098, -27.3211896544533, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0.368070775200000, 0.927538353600000, 0.0647804564400000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.368070775200000, 0.927538353600000, 0.0647804564400000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0.926849857800000, -0.371555795000000, 0.0538110521000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.926849857800000, -0.371555795000000, 0.0538110521000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0739813686700000, 0.0402354812100000, -0.996447621100000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0739813686700000, 0.0402354812100000, -0.996447621100000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25.1247089069361, -13.6643153716305, 338.402179781496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 314.766180949327, -126.183542693037, 18.2746959713482, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-0.0545601857000000, 0.990011492400000, 0.130001658700000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0545601857000000, 0.990011492400000, 0.130001658700000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0.00715362187600000, -0.129804687800000, 0.991513776300000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00715362187600000, -0.129804687800000, 0.991513776300000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0.998484858200000, 0.0550271584700000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.998484858200000, 0.0550271584700000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-269.641235850096, -14.8601061832005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1.93183845263936, -35.0538079271675, 267.758692391082, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.570531530100000, 0.802997754600000, 0.172303161900000, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.570531530100000, 0.802997754600000, 0.172303161900000, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.819995398500000, -0.545254327300000, -0.174084024400000, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.819995398500000, -0.545254327300000, -0.174084024400000, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0458400401200000, -0.240608227500000, 0.969539248800000, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0458400401200000, -0.240608227500000, 0.969539248800000, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14.1002759282946, 74.0104587493080, -298.227726145181, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -252.228430614687, -167.718798803413, -53.5477886215247, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.404713347600000, 0.882865706900000, 0.238233603500000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.404713347600000, 0.882865706900000, 0.238233603500000, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.913293925200000, -0.403306097000000, -0.0569067509300000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.913293925200000, -0.403306097000000, -0.0569067509300000, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0458400404500000, 0.240608229200000, -0.969539255500000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0458400404500000, 0.240608229200000, -0.969539255500000, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -13.0843118083063, -68.6777992251365, 276.739588465070, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 260.685251859301, -115.117322662376, -16.2431286241534, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.884050201900000, -0.467391950500000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.884050201900000, -0.467391950500000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.9999999992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.9999999992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.467391950500000, -0.884050201900000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.467391950500000, -0.884050201900000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105.576999981318, 199.693999970760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225.8853619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -0.0566883950900000, -0.187071703800000, 0.980709235100000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0566883950900000, -0.187071703800000, 0.980709235100000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0566883950900000, -0.187071703800000, 0.980709235100000, 0, 0, 0, 0, 0, 0, -0.0566883950900000, -0.187071703800000, 0.980709235100000], [0, 0, 0, 0.998028531100000, -0.0371140799900000, 0.0506099458800000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.998028531100000, -0.0371140799900000, 0.0506099458800000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.998028531100000, -0.0371140799900000, 0.0506099458800000, 0, 0, 0, 0, 0, 0, 0.998028531100000, -0.0371140799900000, 0.0506099458800000], [0, 0, 0, 0.0269304331300000, 0.981644793900000, 0.188806835400000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0269304331300000, 0.981644793900000, 0.188806835400000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0269304331300000, 0.981644793900000, 0.188806835400000, 0, 0, 0, 0, 0, 0, 0.0269304331300000, 0.981644793900000, 0.188806835400000], [0, 0, 0, 2.67756801994765, 97.6003874281077, 18.7721876575165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32.7415088488389, 1.11279291863794, 2.10483961660985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.9522467948*10^(-8), 0.1705910230*10^(-7), 0.2703616743*10^(-8), 0, 0, 0, 0, 0, 0, 0.9522467948*10^(-8), -0.1705910230*10^(-7), -0.2703616743*10^(-8)], [0, 0, 0, 0.366096480031920, 13.3446314046881, 2.56666937038254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.22470601333896, -106.173817788490, -53.7098405549707, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.37530389507242, 86.5825176958204, 16.6530411801460, 0, 0, 0, 0, 0, 0, -2.37530389507242, -86.5825176958204, -16.6530411801460], [0, 0, 0, -7.93109035346571, 19.1042061259251, -98.1953686020184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114.307672592109, -3.80216094678311, 3.46394489326243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -88.0275874662491, 3.27351656185414, -4.46387183880559, 0, 0, 0, 0, 0, 0, 88.0275874662491, -3.27351656185414, 4.46387183880559], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1]]);
B66N := Vector[column](66, [-dFx_9, -dFy_9, -dFz_9, -dFx_13, -dFy_13, -dFz_13, -dFx_12, -dFy_12, -dFz_12, -dFx_15, -dFy_15, -dFz_15, -dFx_8, -dFy_8, -dFz_8, -dFx_17, -dFy_17, -dFz_17, -dFx_14, -dFy_14, -dFz_14, -dFx_16, -dFy_16, -dFz_16, -dFx_2, -dFy_2, -dFz_2, -dMy_2, -dMz_2, -dFx_3, -dFy_3, -dFz_3, -dMy_3, -dMz_3, -dFx_4, -dFy_4, -dFz_4, -dMy_4, -dMz_4, -dFx_5, -dFy_5, -dFz_5, -dMy_5, -dMz_5, -dFx_6, -dFy_6, -dFz_6, -dMy_6, -dMz_6, -dFx_11, -dFy_11, -dFz_11, -dMy_11, -dMz_11, -F_x - dFx_1, -F_y - dFy_1, -F_z - dFz_1, -M_x - dMx_1, -M_y - dMy_1, -M_z - dMz_1, -dFx_7, -dFy_7, -dFz_7, -dFx_10, -dFy_10, -dFz_10]);

# Linear system 116 x 116
A116 := Matrix(116, 116, [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-P2[1] + P7[1])/sqrt(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P2[3]^2 - 2*P2[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2), (-P2[2] + P7[2])/sqrt(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P2[3]^2 - 2*P2[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2), (-P2[3] + P7[3])/sqrt(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P2[3]^2 - 2*P2[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-P2[1] + P7[1])/sqrt(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P2[3]^2 - 2*P2[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2), (-P2[2] + P7[2])/sqrt(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P2[3]^2 - 2*P2[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2), -(P2[3] - P7[3])/sqrt(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P2[3]^2 - 2*P2[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(-P2[2] + P7[2])/(sqrt((P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2))*sqrt(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P2[3]^2 - 2*P2[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2)), -(P2[1] - P7[1])/(sqrt((P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2))*sqrt(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P2[3]^2 - 2*P2[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(-P2[2] + P7[2])/(sqrt((P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2))*sqrt(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P2[3]^2 - 2*P2[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2)), -(P2[1] - P7[1])/(sqrt((P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2))*sqrt(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P2[3]^2 - 2*P2[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((P2[3] - P7[3])*P7[1] - (P2[3] - P7[3])*P2[1])/(sqrt((P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2))*(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2)), ((P2[3] - P7[3])*P7[2] - (P2[3] - P7[3])*P2[2])/(sqrt((P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2))*(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2)), (P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(sqrt((P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2))*(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((P2[3] - P7[3])*P7[1] - (P2[3] - P7[3])*P2[1])/(sqrt((P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2))*(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2)), ((P2[3] - P7[3])*P7[2] - (P2[3] - P7[3])*P2[2])/(sqrt((P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2))*(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2)), (P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(sqrt((P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2))*(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-P2[1] + P7[1])/sqrt(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P2[3]^2 - 2*P2[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2), (-P2[2] + P7[2])/sqrt(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P2[3]^2 - 2*P2[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2), -(P2[3] - P7[3])/sqrt(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P2[3]^2 - 2*P2[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -((-P2[3] + P7[3])*P2[1] + (P2[3] - P7[3])*P7[1])/(sqrt((P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2))*sqrt(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P2[3]^2 - 2*P2[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2)), -((-P2[3] + P7[3])*P2[2] + (P2[3] - P7[3])*P7[2])/(sqrt((P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2))*sqrt(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P2[3]^2 - 2*P2[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2)), -(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(sqrt((P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2))*sqrt(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P2[3]^2 - 2*P2[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2)), 0, 0, 0, -(-P2[2] + P7[2])/(sqrt((P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2))*sqrt(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P2[3]^2 - 2*P2[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2)), -(P2[1] - P7[1])/(sqrt((P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2))*sqrt(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P2[3]^2 - 2*P2[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((P2[2] - P7[2])*P2[1]^2 + (-2*P2[2]*P7[1] + 2*P7[1]*P7[2])*P2[1] + P2[2]^3 - 3*P7[2]*P2[2]^2 + (P7[1]^2 + 3*P7[2]^2 - (-P2[3] + P7[3])*(P2[3] - P7[3]))*P2[2] - P7[2]*P7[1]^2 + P7[2]*(-P7[2]^2 + (-P2[3] + P7[3])*(P2[3] - P7[3])))/(sqrt((P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2))*(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2)), (-P2[1]^3 + 3*P7[1]*P2[1]^2 + (-P2[2]^2 + 2*P2[2]*P7[2] - 3*P7[1]^2 - P7[2]^2 - (P2[3] - P7[3])^2)*P2[1] + P7[1]*P2[2]^2 - 2*P7[2]*P7[1]*P2[2] + P7[1]^3 + (P7[2]^2 + (P2[3] - P7[3])^2)*P7[1])/(sqrt((P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2))*(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2)), 0, 0, 0, 0, ((-P2[3] + P7[3])*P2[1] + (P2[3] - P7[3])*P7[1])/(sqrt((P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2))*(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2)), ((-P2[3] + P7[3])*P2[2] + (P2[3] - P7[3])*P7[2])/(sqrt((P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2))*(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2)), (P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(sqrt((P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2))*(P2[1]^2 - 2*P2[1]*P7[1] + P2[2]^2 - 2*P2[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P2[3] - P7[3])^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-P4[1] + P6[1])/sqrt(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P4[3]^2 - 2*P4[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), (-P4[2] + P6[2])/sqrt(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P4[3]^2 - 2*P4[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), (-P4[3] + P6[3])/sqrt(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P4[3]^2 - 2*P4[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-P4[1] + P6[1])/sqrt(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P4[3]^2 - 2*P4[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), (-P4[2] + P6[2])/sqrt(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P4[3]^2 - 2*P4[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), -(P4[3] - P6[3])/sqrt(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P4[3]^2 - 2*P4[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(-P4[2] + P6[2])/(sqrt((P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2))*sqrt(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P4[3]^2 - 2*P4[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), -(P4[1] - P6[1])/(sqrt((P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2))*sqrt(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P4[3]^2 - 2*P4[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(-P4[2] + P6[2])/(sqrt((P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2))*sqrt(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P4[3]^2 - 2*P4[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), -(P4[1] - P6[1])/(sqrt((P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2))*sqrt(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P4[3]^2 - 2*P4[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((P4[3] - P6[3])*P6[1] - (P4[3] - P6[3])*P4[1])/(sqrt((P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2))*(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2)), ((P4[3] - P6[3])*P6[2] - (P4[3] - P6[3])*P4[2])/(sqrt((P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2))*(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2)), (P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(sqrt((P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2))*(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((P4[3] - P6[3])*P6[1] - (P4[3] - P6[3])*P4[1])/(sqrt((P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2))*(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2)), ((P4[3] - P6[3])*P6[2] - (P4[3] - P6[3])*P4[2])/(sqrt((P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2))*(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2)), (P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(sqrt((P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2))*(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2))], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-P4[1] + P6[1])/sqrt(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P4[3]^2 - 2*P4[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), (-P4[2] + P6[2])/sqrt(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P4[3]^2 - 2*P4[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), -(P4[3] - P6[3])/sqrt(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P4[3]^2 - 2*P4[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -((-P4[3] + P6[3])*P4[1] + (P4[3] - P6[3])*P6[1])/(sqrt((P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2))*sqrt(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P4[3]^2 - 2*P4[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), -((-P4[3] + P6[3])*P4[2] + (P4[3] - P6[3])*P6[2])/(sqrt((P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2))*sqrt(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P4[3]^2 - 2*P4[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), -(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(sqrt((P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2))*sqrt(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P4[3]^2 - 2*P4[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), 0, 0, 0, -(-P4[2] + P6[2])/(sqrt((P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2))*sqrt(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P4[3]^2 - 2*P4[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), -(P4[1] - P6[1])/(sqrt((P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2))*sqrt(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P4[3]^2 - 2*P4[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((P4[2] - P6[2])*P4[1]^2 + (-2*P4[2]*P6[1] + 2*P6[1]*P6[2])*P4[1] + P4[2]^3 - 3*P6[2]*P4[2]^2 + (P6[1]^2 + 3*P6[2]^2 - (-P4[3] + P6[3])*(P4[3] - P6[3]))*P4[2] - P6[2]*P6[1]^2 + P6[2]*(-P6[2]^2 + (-P4[3] + P6[3])*(P4[3] - P6[3])))/(sqrt((P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2))*(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2)), (-P4[1]^3 + 3*P6[1]*P4[1]^2 + (-P4[2]^2 + 2*P4[2]*P6[2] - 3*P6[1]^2 - P6[2]^2 - (P4[3] - P6[3])^2)*P4[1] + P6[1]*P4[2]^2 - 2*P6[2]*P6[1]*P4[2] + P6[1]^3 + (P6[2]^2 + (P4[3] - P6[3])^2)*P6[1])/(sqrt((P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2))*(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2)), 0, 0, 0, 0, ((-P4[3] + P6[3])*P4[1] + (P4[3] - P6[3])*P6[1])/(sqrt((P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2))*(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2)), ((-P4[3] + P6[3])*P4[2] + (P4[3] - P6[3])*P6[2])/(sqrt((P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2))*(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2)), (P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(sqrt((P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2))*(P4[1]^2 - 2*P4[1]*P6[1] + P4[2]^2 - 2*P4[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P4[3] - P6[3])^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-P5[1] + P8[1])/sqrt(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P5[3]^2 - 2*P5[3]*P8[3] + P8[1]^2 + P8[2]^2 + P8[3]^2), (-P5[2] + P8[2])/sqrt(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P5[3]^2 - 2*P5[3]*P8[3] + P8[1]^2 + P8[2]^2 + P8[3]^2), (-P5[3] + P8[3])/sqrt(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P5[3]^2 - 2*P5[3]*P8[3] + P8[1]^2 + P8[2]^2 + P8[3]^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-P5[1] + P8[1])/sqrt(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P5[3]^2 - 2*P5[3]*P8[3] + P8[1]^2 + P8[2]^2 + P8[3]^2), (-P5[2] + P8[2])/sqrt(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P5[3]^2 - 2*P5[3]*P8[3] + P8[1]^2 + P8[2]^2 + P8[3]^2), (-P5[3] + P8[3])/sqrt(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P5[3]^2 - 2*P5[3]*P8[3] + P8[1]^2 + P8[2]^2 + P8[3]^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-P11[1] + P12[1])/sqrt(P11[1]^2 - 2*P11[1]*P12[1] + P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[1]^2 + P12[2]^2 + P12[3]^2), (-P11[2] + P12[2])/sqrt(P11[1]^2 - 2*P11[1]*P12[1] + P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[1]^2 + P12[2]^2 + P12[3]^2), (-P11[3] + P12[3])/sqrt(P11[1]^2 - 2*P11[1]*P12[1] + P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[1]^2 + P12[2]^2 + P12[3]^2), 0, 0, 0, (-P11[1] + P12[1])/sqrt(P11[1]^2 - 2*P11[1]*P12[1] + P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[1]^2 + P12[2]^2 + P12[3]^2), (-P11[2] + P12[2])/sqrt(P11[1]^2 - 2*P11[1]*P12[1] + P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[1]^2 + P12[2]^2 + P12[3]^2), -(P11[3] - P12[3])/sqrt(P11[1]^2 - 2*P11[1]*P12[1] + P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[1]^2 + P12[2]^2 + P12[3]^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(-P11[3] + P12[3])/(sqrt(P11[1]^2 - 2*P11[1]*P12[1] + P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[1]^2 + P12[2]^2 + P12[3]^2)*sqrt((P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[2]^2 + P12[3]^2)/(P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[2]^2 + P12[3]^2 + (P11[1] - P12[1])^2))), -(P11[2] - P12[2])/(sqrt(P11[1]^2 - 2*P11[1]*P12[1] + P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[1]^2 + P12[2]^2 + P12[3]^2)*sqrt((P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[2]^2 + P12[3]^2)/(P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[2]^2 + P12[3]^2 + (P11[1] - P12[1])^2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(-P11[2]^2 + 2*P11[2]*P12[2] - P11[3]^2 + 2*P11[3]*P12[3] - P12[2]^2 - P12[3]^2)/(sqrt((P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[2]^2 + P12[3]^2)/(P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[2]^2 + P12[3]^2 + (P11[1] - P12[1])^2))*(P11[1]^2 - 2*P11[1]*P12[1] + P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[1]^2 + P12[2]^2 + P12[3]^2)), -(P11[2] - P12[2])*(P11[1] - P12[1])/(sqrt((P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[2]^2 + P12[3]^2)/(P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[2]^2 + P12[3]^2 + (P11[1] - P12[1])^2))*(P11[1]^2 - 2*P11[1]*P12[1] + P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[1]^2 + P12[2]^2 + P12[3]^2)), -(P11[3] - P12[3])*(P11[1] - P12[1])/(sqrt((P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[2]^2 + P12[3]^2)/(P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[2]^2 + P12[3]^2 + (P11[1] - P12[1])^2))*(P11[1]^2 - 2*P11[1]*P12[1] + P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[1]^2 + P12[2]^2 + P12[3]^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (P15[2] - P14[2])/(sqrt(P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P14[3]^2 - 2*P14[3]*P15[3] + P15[1]^2 + P15[2]^2 + P15[3]^2)*sqrt((P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P15[1]^2 + P15[2]^2)/(P14[1]^2 - 2*P15[1]*P14[1] + P14[2]^2 - 2*P15[2]*P14[2] + P15[1]^2 + P15[2]^2 + (-P15[3] + P14[3])^2))), (-P15[1] + P14[1])/(sqrt(P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P14[3]^2 - 2*P14[3]*P15[3] + P15[1]^2 + P15[2]^2 + P15[3]^2)*sqrt((P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P15[1]^2 + P15[2]^2)/(P14[1]^2 - 2*P15[1]*P14[1] + P14[2]^2 - 2*P15[2]*P14[2] + P15[1]^2 + P15[2]^2 + (-P15[3] + P14[3])^2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(-P15[1] + P14[1])*(-P15[3] + P14[3])/(sqrt((P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P15[1]^2 + P15[2]^2)/(P14[1]^2 - 2*P15[1]*P14[1] + P14[2]^2 - 2*P15[2]*P14[2] + P15[1]^2 + P15[2]^2 + (-P15[3] + P14[3])^2))*(P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P14[3]^2 - 2*P14[3]*P15[3] + P15[1]^2 + P15[2]^2 + P15[3]^2)), -(-P15[2] + P14[2])*(-P15[3] + P14[3])/(sqrt((P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P15[1]^2 + P15[2]^2)/(P14[1]^2 - 2*P15[1]*P14[1] + P14[2]^2 - 2*P15[2]*P14[2] + P15[1]^2 + P15[2]^2 + (-P15[3] + P14[3])^2))*(P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P14[3]^2 - 2*P14[3]*P15[3] + P15[1]^2 + P15[2]^2 + P15[3]^2)), (P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P15[1]^2 + P15[2]^2)/(sqrt((P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P15[1]^2 + P15[2]^2)/(P14[1]^2 - 2*P15[1]*P14[1] + P14[2]^2 - 2*P15[2]*P14[2] + P15[1]^2 + P15[2]^2 + (-P15[3] + P14[3])^2))*(P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P14[3]^2 - 2*P14[3]*P15[3] + P15[1]^2 + P15[2]^2 + P15[3]^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-P3[1] + P6[1])/sqrt(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P3[3]^2 - 2*P3[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), (-P3[2] + P6[2])/sqrt(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P3[3]^2 - 2*P3[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), (-P3[3] + P6[3])/sqrt(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P3[3]^2 - 2*P3[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-P3[2] + P6[2])/sqrt(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P3[3]^2 - 2*P3[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), (-P3[3] + P6[3])/sqrt(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P3[3]^2 - 2*P3[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(-P3[2] + P6[2])/(sqrt((P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2))*sqrt(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P3[3]^2 - 2*P3[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), -(P3[1] - P6[1])/(sqrt((P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2))*sqrt(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P3[3]^2 - 2*P3[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(P3[1] - P6[1])/(sqrt((P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2))*sqrt(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P3[3]^2 - 2*P3[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((P3[3] - P6[3])*P6[1] - (P3[3] - P6[3])*P3[1])/(sqrt((P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2))*(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2)), ((P3[3] - P6[3])*P6[2] - (P3[3] - P6[3])*P3[2])/(sqrt((P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2))*(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2)), (P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(sqrt((P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2))*(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((P3[3] - P6[3])*P6[2] - (P3[3] - P6[3])*P3[2])/(sqrt((P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2))*(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2)), (P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(sqrt((P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2))*(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2)), 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-P3[1] + P6[1])/sqrt(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P3[3]^2 - 2*P3[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), (-P3[2] + P6[2])/sqrt(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P3[3]^2 - 2*P3[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), -(P3[3] - P6[3])/sqrt(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P3[3]^2 - 2*P3[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -((-P3[3] + P6[3])*P3[1] + (P3[3] - P6[3])*P6[1])/(sqrt((P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2))*sqrt(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P3[3]^2 - 2*P3[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), -((-P3[3] + P6[3])*P3[2] + (P3[3] - P6[3])*P6[2])/(sqrt((P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2))*sqrt(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P3[3]^2 - 2*P3[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), -(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(sqrt((P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2))*sqrt(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P3[3]^2 - 2*P3[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), 0, 0, 0, -(-P3[2] + P6[2])/(sqrt((P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2))*sqrt(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P3[3]^2 - 2*P3[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), -(P3[1] - P6[1])/(sqrt((P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2))*sqrt(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P3[3]^2 - 2*P3[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((P3[2] - P6[2])*P3[1]^2 + (-2*P3[2]*P6[1] + 2*P6[1]*P6[2])*P3[1] + P3[2]^3 - 3*P6[2]*P3[2]^2 + (P6[1]^2 + 3*P6[2]^2 - (-P3[3] + P6[3])*(P3[3] - P6[3]))*P3[2] - P6[2]*P6[1]^2 + P6[2]*(-P6[2]^2 + (-P3[3] + P6[3])*(P3[3] - P6[3])))/(sqrt((P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2))*(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2)), (-P3[1]^3 + 3*P6[1]*P3[1]^2 + (-P3[2]^2 + 2*P3[2]*P6[2] - 3*P6[1]^2 - P6[2]^2 - (P3[3] - P6[3])^2)*P3[1] + P6[1]*P3[2]^2 - 2*P6[2]*P6[1]*P3[2] + P6[1]^3 + (P6[2]^2 + (P3[3] - P6[3])^2)*P6[1])/(sqrt((P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2))*(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2)), 0, 0, 0, 0, ((-P3[3] + P6[3])*P3[1] + (P3[3] - P6[3])*P6[1])/(sqrt((P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2))*(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2)), ((-P3[3] + P6[3])*P3[2] + (P3[3] - P6[3])*P6[2])/(sqrt((P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2))*(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2)), (P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(sqrt((P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2))*(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-P1[1] + P7[1])/sqrt(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P1[3]^2 - 2*P1[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2), (-P1[2] + P7[2])/sqrt(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P1[3]^2 - 2*P1[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2), (-P1[3] + P7[3])/sqrt(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P1[3]^2 - 2*P1[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-P1[2] + P7[2])/sqrt(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P1[3]^2 - 2*P1[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2), (-P1[3] + P7[3])/sqrt(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P1[3]^2 - 2*P1[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(-P1[2] + P7[2])/(sqrt((P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2))*sqrt(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P1[3]^2 - 2*P1[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2)), -(P1[1] - P7[1])/(sqrt((P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2))*sqrt(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P1[3]^2 - 2*P1[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(P1[1] - P7[1])/(sqrt((P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2))*sqrt(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P1[3]^2 - 2*P1[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((P1[3] - P7[3])*P7[1] - (P1[3] - P7[3])*P1[1])/(sqrt((P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2))*(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2)), ((P1[3] - P7[3])*P7[2] - (P1[3] - P7[3])*P1[2])/(sqrt((P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2))*(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2)), (P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(sqrt((P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2))*(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((P1[3] - P7[3])*P7[2] - (P1[3] - P7[3])*P1[2])/(sqrt((P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2))*(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2)), (P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(sqrt((P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2))*(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-P1[1] + P7[1])/sqrt(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P1[3]^2 - 2*P1[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2), (-P1[2] + P7[2])/sqrt(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P1[3]^2 - 2*P1[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2), -(P1[3] - P7[3])/sqrt(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P1[3]^2 - 2*P1[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -((-P1[3] + P7[3])*P1[1] + (P1[3] - P7[3])*P7[1])/(sqrt((P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2))*sqrt(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P1[3]^2 - 2*P1[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2)), -((-P1[3] + P7[3])*P1[2] + (P1[3] - P7[3])*P7[2])/(sqrt((P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2))*sqrt(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P1[3]^2 - 2*P1[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2)), -(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(sqrt((P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2))*sqrt(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P1[3]^2 - 2*P1[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2)), 0, 0, 0, -(-P1[2] + P7[2])/(sqrt((P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2))*sqrt(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P1[3]^2 - 2*P1[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2)), -(P1[1] - P7[1])/(sqrt((P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2))*sqrt(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P1[3]^2 - 2*P1[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((P1[2] - P7[2])*P1[1]^2 + (-2*P1[2]*P7[1] + 2*P7[1]*P7[2])*P1[1] + P1[2]^3 - 3*P7[2]*P1[2]^2 + (P7[1]^2 + 3*P7[2]^2 - (-P1[3] + P7[3])*(P1[3] - P7[3]))*P1[2] - P7[2]*P7[1]^2 + P7[2]*(-P7[2]^2 + (-P1[3] + P7[3])*(P1[3] - P7[3])))/(sqrt((P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2))*(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2)), (-P1[1]^3 + 3*P7[1]*P1[1]^2 + (-P1[2]^2 + 2*P1[2]*P7[2] - 3*P7[1]^2 - P7[2]^2 - (P1[3] - P7[3])^2)*P1[1] + P7[1]*P1[2]^2 - 2*P7[2]*P7[1]*P1[2] + P7[1]^3 + (P7[2]^2 + (P1[3] - P7[3])^2)*P7[1])/(sqrt((P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2))*(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2)), 0, 0, 0, 0, ((-P1[3] + P7[3])*P1[1] + (P1[3] - P7[3])*P7[1])/(sqrt((P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2))*(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2)), ((-P1[3] + P7[3])*P1[2] + (P1[3] - P7[3])*P7[2])/(sqrt((P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2))*(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2)), (P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(sqrt((P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2))*(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_Rocker, eyx_Rocker, ezx_Rocker, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_Rocker, eyx_Rocker, ezx_Rocker, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exy_Rocker, eyy_Rocker, ezy_Rocker, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exy_Rocker, eyy_Rocker, ezy_Rocker, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exz_Rocker, eyz_Rocker, ezz_Rocker, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exz_Rocker, eyz_Rocker, ezz_Rocker, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((pyy_Rocker - P14[2])*eyz_Rocker + ezz_Rocker*(pzz_Rocker - P14[3]))*exy_Rocker + ((P14[2] - pyy_Rocker)*eyy_Rocker - (pzz_Rocker - P14[3])*ezy_Rocker)*exz_Rocker, (P14[1] - pxx_Rocker)*eyz_Rocker*exy_Rocker + (pxx_Rocker - P14[1])*eyy_Rocker*exz_Rocker - ezz_Rocker*(P14[3] - pzz_Rocker)*eyy_Rocker + ezy_Rocker*(P14[3] - pzz_Rocker)*eyz_Rocker, ezz_Rocker*(P14[1] - pxx_Rocker)*exy_Rocker - (P14[1] - pxx_Rocker)*ezy_Rocker*exz_Rocker - ezz_Rocker*(pyy_Rocker - P14[2])*eyy_Rocker + ezy_Rocker*(pyy_Rocker - P14[2])*eyz_Rocker, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((pyy_Rocker - P12[2])*eyz_Rocker + ezz_Rocker*(pzz_Rocker - P12[3]))*exy_Rocker + ((P12[2] - pyy_Rocker)*eyy_Rocker - (pzz_Rocker - P12[3])*ezy_Rocker)*exz_Rocker, (P12[1] - pxx_Rocker)*eyz_Rocker*exy_Rocker - (P12[1] - pxx_Rocker)*eyy_Rocker*exz_Rocker - ezz_Rocker*(P12[3] - pzz_Rocker)*eyy_Rocker + ezy_Rocker*(P12[3] - pzz_Rocker)*eyz_Rocker, ezz_Rocker*(P12[1] - pxx_Rocker)*exy_Rocker - (P12[1] - pxx_Rocker)*ezy_Rocker*exz_Rocker - ezz_Rocker*(pyy_Rocker - P12[2])*eyy_Rocker + ezy_Rocker*(pyy_Rocker - P12[2])*eyz_Rocker, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((P14[2] - pyy_Rocker)*eyz_Rocker - ezz_Rocker*(pzz_Rocker - P14[3]))*exx_Rocker + ((pyy_Rocker - P14[2])*eyx_Rocker + (pzz_Rocker - P14[3])*ezx_Rocker)*exz_Rocker, (pxx_Rocker - P14[1])*eyz_Rocker*exx_Rocker + (P14[1] - pxx_Rocker)*eyx_Rocker*exz_Rocker + ezz_Rocker*(P14[3] - pzz_Rocker)*eyx_Rocker - ezx_Rocker*(P14[3] - pzz_Rocker)*eyz_Rocker, -ezz_Rocker*(P14[1] - pxx_Rocker)*exx_Rocker + (P14[1] - pxx_Rocker)*ezx_Rocker*exz_Rocker + ezz_Rocker*(pyy_Rocker - P14[2])*eyx_Rocker - ezx_Rocker*(pyy_Rocker - P14[2])*eyz_Rocker, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((P12[2] - pyy_Rocker)*eyz_Rocker - ezz_Rocker*(pzz_Rocker - P12[3]))*exx_Rocker + ((pyy_Rocker - P12[2])*eyx_Rocker + (pzz_Rocker - P12[3])*ezx_Rocker)*exz_Rocker, -(P12[1] - pxx_Rocker)*eyz_Rocker*exx_Rocker + (P12[1] - pxx_Rocker)*eyx_Rocker*exz_Rocker + ezz_Rocker*(P12[3] - pzz_Rocker)*eyx_Rocker - ezx_Rocker*(P12[3] - pzz_Rocker)*eyz_Rocker, -ezz_Rocker*(P12[1] - pxx_Rocker)*exx_Rocker + (P12[1] - pxx_Rocker)*ezx_Rocker*exz_Rocker + ezz_Rocker*(pyy_Rocker - P12[2])*eyx_Rocker - ezx_Rocker*(pyy_Rocker - P12[2])*eyz_Rocker, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((pyy_Rocker - P14[2])*eyy_Rocker + (pzz_Rocker - P14[3])*ezy_Rocker)*exx_Rocker + ((P14[2] - pyy_Rocker)*eyx_Rocker - (pzz_Rocker - P14[3])*ezx_Rocker)*exy_Rocker, (P14[1] - pxx_Rocker)*eyy_Rocker*exx_Rocker + (pxx_Rocker - P14[1])*eyx_Rocker*exy_Rocker + (P14[3] - pzz_Rocker)*(-eyx_Rocker*ezy_Rocker + eyy_Rocker*ezx_Rocker), (P14[1] - pxx_Rocker)*ezy_Rocker*exx_Rocker - (P14[1] - pxx_Rocker)*ezx_Rocker*exy_Rocker + (pyy_Rocker - P14[2])*(-eyx_Rocker*ezy_Rocker + eyy_Rocker*ezx_Rocker), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((pyy_Rocker - P12[2])*eyy_Rocker + (pzz_Rocker - P12[3])*ezy_Rocker)*exx_Rocker + ((P12[2] - pyy_Rocker)*eyx_Rocker - (pzz_Rocker - P12[3])*ezx_Rocker)*exy_Rocker, (P12[1] - pxx_Rocker)*eyy_Rocker*exx_Rocker - (P12[1] - pxx_Rocker)*eyx_Rocker*exy_Rocker + (P12[3] - pzz_Rocker)*(-eyx_Rocker*ezy_Rocker + eyy_Rocker*ezx_Rocker), (P12[1] - pxx_Rocker)*ezy_Rocker*exx_Rocker - (P12[1] - pxx_Rocker)*ezx_Rocker*exy_Rocker + (pyy_Rocker - P12[2])*(-eyx_Rocker*ezy_Rocker + eyy_Rocker*ezx_Rocker), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-P6[1] + P11[1])/sqrt(P11[1]^2 - 2*P11[1]*P6[1] + P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), (-P6[2] + P11[2])/sqrt(P11[1]^2 - 2*P11[1]*P6[1] + P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), (-P6[3] + P11[3])/sqrt(P11[1]^2 - 2*P11[1]*P6[1] + P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-P6[1] + P11[1])/sqrt(P11[1]^2 - 2*P11[1]*P6[1] + P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), (-P6[2] + P11[2])/sqrt(P11[1]^2 - 2*P11[1]*P6[1] + P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), -(P6[3] - P11[3])/sqrt(P11[1]^2 - 2*P11[1]*P6[1] + P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(-P6[3] + P11[3])/(sqrt((P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2))*sqrt(P11[1]^2 - 2*P11[1]*P6[1] + P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), -(P6[2] - P11[2])/(sqrt((P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2))*sqrt(P11[1]^2 - 2*P11[1]*P6[1] + P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(-P6[3] + P11[3])/(sqrt((P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2))*sqrt(P11[1]^2 - 2*P11[1]*P6[1] + P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), -(P6[2] - P11[2])/(sqrt((P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2))*sqrt(P11[1]^2 - 2*P11[1]*P6[1] + P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(sqrt((P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2))*(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2)), ((-P6[1] + P11[1])*P6[2] + (P6[1] - P11[1])*P11[2])/(sqrt((P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2))*(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2)), ((-P6[1] + P11[1])*P6[3] + (P6[1] - P11[1])*P11[3])/(sqrt((P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2))*(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(sqrt((P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2))*(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2)), ((P6[1] - P11[1])*P11[2] - (P6[1] - P11[1])*P6[2])/(sqrt((P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2))*(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2)), ((P6[1] - P11[1])*P11[3] - (P6[1] - P11[1])*P6[3])/(sqrt((P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2))*(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-P6[1] + P11[1])/sqrt(P11[1]^2 - 2*P11[1]*P6[1] + P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), (-P6[2] + P11[2])/sqrt(P11[1]^2 - 2*P11[1]*P6[1] + P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), -(P6[3] - P11[3])/sqrt(P11[1]^2 - 2*P11[1]*P6[1] + P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-P11[2]^2 + 2*P11[2]*P6[2] - P11[3]^2 + 2*P11[3]*P6[3] - P6[2]^2 - P6[3]^2)/(sqrt((P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2))*sqrt(P11[1]^2 - 2*P11[1]*P6[1] + P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), ((-P6[1] + P11[1])*P11[2] + (P6[1] - P11[1])*P6[2])/(sqrt((P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2))*sqrt(P11[1]^2 - 2*P11[1]*P6[1] + P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), ((-P6[1] + P11[1])*P11[3] + (P6[1] - P11[1])*P6[3])/(sqrt((P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2))*sqrt(P11[1]^2 - 2*P11[1]*P6[1] + P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (P6[3] - P11[3])/(sqrt((P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2))*sqrt(P11[1]^2 - 2*P11[1]*P6[1] + P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), (-P6[2] + P11[2])/(sqrt((P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2))*sqrt(P11[1]^2 - 2*P11[1]*P6[1] + P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((P6[3] - P11[3])*P11[2]^2 + (2*P11[3]*P6[2] - 2*P6[2]*P6[3])*P11[2] - P11[3]^3 + 3*P6[3]*P11[3]^2 + (-P6[2]^2 - 3*P6[3]^2 - (P6[1] - P11[1])^2)*P11[3] + P6[3]*P6[2]^2 + (P6[3]^2 + (P6[1] - P11[1])^2)*P6[3])/(sqrt((P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2))*(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2)), (P11[2]^3 - 3*P6[2]*P11[2]^2 + (P11[3]^2 - 2*P6[3]*P11[3] + 3*P6[2]^2 + P6[3]^2 + (P6[1] - P11[1])^2)*P11[2] - P6[2]*P11[3]^2 + 2*P6[3]*P6[2]*P11[3] - P6[2]^3 + (-P6[3]^2 - (P6[1] - P11[1])^2)*P6[2])/(sqrt((P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2))*(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(sqrt((P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2))*(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2)), ((P6[1] - P11[1])*P11[2] - (P6[1] - P11[1])*P6[2])/(sqrt((P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2))*(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2)), ((P6[1] - P11[1])*P11[3] - (P6[1] - P11[1])*P6[3])/(sqrt((P11[2]^2 - 2*P11[2]*P6[2] + P11[3]^2 - 2*P11[3]*P6[3] + P6[2]^2 + P6[3]^2)/(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2))*(P6[2]^2 - 2*P6[2]*P11[2] + P6[3]^2 - 2*P6[3]*P11[3] + P11[2]^2 + P11[3]^2 + (P6[1] - P11[1])^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_Carrier, eyx_Carrier, ezx_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exx_Carrier, eyx_Carrier, ezx_Carrier, exx_Carrier, eyx_Carrier, ezx_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exy_Carrier, eyy_Carrier, ezy_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exy_Carrier, eyy_Carrier, ezy_Carrier, exy_Carrier, eyy_Carrier, ezy_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exz_Carrier, eyz_Carrier, ezz_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, exz_Carrier, eyz_Carrier, ezz_Carrier, exz_Carrier, eyz_Carrier, ezz_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((pyy_Carrier - P7[2])*eyz_Carrier - ezz_Carrier*(P7[3] - pzz_Carrier))*exy_Carrier + ((P7[2] - pyy_Carrier)*eyy_Carrier + ezy_Carrier*(P7[3] - pzz_Carrier))*exz_Carrier, (P7[1] - pxx_Carrier)*eyz_Carrier*exy_Carrier + (pxx_Carrier - P7[1])*eyy_Carrier*exz_Carrier - ezz_Carrier*(P7[3] - pzz_Carrier)*eyy_Carrier + ezy_Carrier*(P7[3] - pzz_Carrier)*eyz_Carrier, -(pxx_Carrier - P7[1])*ezz_Carrier*exy_Carrier + ezy_Carrier*(pxx_Carrier - P7[1])*exz_Carrier - ezz_Carrier*(pyy_Carrier - P7[2])*eyy_Carrier + ezy_Carrier*(pyy_Carrier - P7[2])*eyz_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((pyy_Carrier - P8[2])*eyz_Carrier - ezz_Carrier*(P8[3] - pzz_Carrier))*exy_Carrier + ((P8[2] - pyy_Carrier)*eyy_Carrier + ezy_Carrier*(P8[3] - pzz_Carrier))*exz_Carrier, (P8[1] - pxx_Carrier)*eyz_Carrier*exy_Carrier + (pxx_Carrier - P8[1])*eyy_Carrier*exz_Carrier - ezz_Carrier*(P8[3] - pzz_Carrier)*eyy_Carrier + ezy_Carrier*(P8[3] - pzz_Carrier)*eyz_Carrier, -(pxx_Carrier - P8[1])*ezz_Carrier*exy_Carrier + ezy_Carrier*(pxx_Carrier - P8[1])*exz_Carrier - ezz_Carrier*(pyy_Carrier - P8[2])*eyy_Carrier + ezy_Carrier*(pyy_Carrier - P8[2])*eyz_Carrier, ((pyy_Carrier - P6[2])*eyz_Carrier - ezz_Carrier*(P6[3] - pzz_Carrier))*exy_Carrier + ((P6[2] - pyy_Carrier)*eyy_Carrier + ezy_Carrier*(P6[3] - pzz_Carrier))*exz_Carrier, (P6[1] - pxx_Carrier)*eyz_Carrier*exy_Carrier + (pxx_Carrier - P6[1])*eyy_Carrier*exz_Carrier - ezz_Carrier*(P6[3] - pzz_Carrier)*eyy_Carrier + ezy_Carrier*(P6[3] - pzz_Carrier)*eyz_Carrier, -(pxx_Carrier - P6[1])*ezz_Carrier*exy_Carrier + ezy_Carrier*(pxx_Carrier - P6[1])*exz_Carrier - ezz_Carrier*(pyy_Carrier - P6[2])*eyy_Carrier + ezy_Carrier*(pyy_Carrier - P6[2])*eyz_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((P7[2] - pyy_Carrier)*eyz_Carrier + ezz_Carrier*(P7[3] - pzz_Carrier))*exx_Carrier + ((pyy_Carrier - P7[2])*eyx_Carrier - ezx_Carrier*(P7[3] - pzz_Carrier))*exz_Carrier, (pxx_Carrier - P7[1])*eyz_Carrier*exx_Carrier + (P7[1] - pxx_Carrier)*eyx_Carrier*exz_Carrier + ezz_Carrier*(P7[3] - pzz_Carrier)*eyx_Carrier - ezx_Carrier*(P7[3] - pzz_Carrier)*eyz_Carrier, (pxx_Carrier - P7[1])*ezz_Carrier*exx_Carrier - ezx_Carrier*(pxx_Carrier - P7[1])*exz_Carrier + ezz_Carrier*(pyy_Carrier - P7[2])*eyx_Carrier - ezx_Carrier*(pyy_Carrier - P7[2])*eyz_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((P8[2] - pyy_Carrier)*eyz_Carrier + ezz_Carrier*(P8[3] - pzz_Carrier))*exx_Carrier + ((pyy_Carrier - P8[2])*eyx_Carrier - ezx_Carrier*(P8[3] - pzz_Carrier))*exz_Carrier, (pxx_Carrier - P8[1])*eyz_Carrier*exx_Carrier + (P8[1] - pxx_Carrier)*eyx_Carrier*exz_Carrier + ezz_Carrier*(P8[3] - pzz_Carrier)*eyx_Carrier - ezx_Carrier*(P8[3] - pzz_Carrier)*eyz_Carrier, (pxx_Carrier - P8[1])*ezz_Carrier*exx_Carrier - ezx_Carrier*(pxx_Carrier - P8[1])*exz_Carrier + ezz_Carrier*(pyy_Carrier - P8[2])*eyx_Carrier - ezx_Carrier*(pyy_Carrier - P8[2])*eyz_Carrier, ((P6[2] - pyy_Carrier)*eyz_Carrier + ezz_Carrier*(P6[3] - pzz_Carrier))*exx_Carrier + ((pyy_Carrier - P6[2])*eyx_Carrier - ezx_Carrier*(P6[3] - pzz_Carrier))*exz_Carrier, (pxx_Carrier - P6[1])*eyz_Carrier*exx_Carrier + (P6[1] - pxx_Carrier)*eyx_Carrier*exz_Carrier + ezz_Carrier*(P6[3] - pzz_Carrier)*eyx_Carrier - ezx_Carrier*(P6[3] - pzz_Carrier)*eyz_Carrier, (pxx_Carrier - P6[1])*ezz_Carrier*exx_Carrier - ezx_Carrier*(pxx_Carrier - P6[1])*exz_Carrier + ezz_Carrier*(pyy_Carrier - P6[2])*eyx_Carrier - ezx_Carrier*(pyy_Carrier - P6[2])*eyz_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((pyy_Carrier - P7[2])*eyy_Carrier - ezy_Carrier*(P7[3] - pzz_Carrier))*exx_Carrier + ((P7[2] - pyy_Carrier)*eyx_Carrier + ezx_Carrier*(P7[3] - pzz_Carrier))*exy_Carrier, (P7[1] - pxx_Carrier)*eyy_Carrier*exx_Carrier + (pxx_Carrier - P7[1])*eyx_Carrier*exy_Carrier - ezy_Carrier*(P7[3] - pzz_Carrier)*eyx_Carrier + ezx_Carrier*(P7[3] - pzz_Carrier)*eyy_Carrier, -ezy_Carrier*(pxx_Carrier - P7[1])*exx_Carrier + ezx_Carrier*(pxx_Carrier - P7[1])*exy_Carrier - ezy_Carrier*(pyy_Carrier - P7[2])*eyx_Carrier + ezx_Carrier*(pyy_Carrier - P7[2])*eyy_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((pyy_Carrier - P8[2])*eyy_Carrier - ezy_Carrier*(P8[3] - pzz_Carrier))*exx_Carrier + ((P8[2] - pyy_Carrier)*eyx_Carrier + ezx_Carrier*(P8[3] - pzz_Carrier))*exy_Carrier, (P8[1] - pxx_Carrier)*eyy_Carrier*exx_Carrier + (pxx_Carrier - P8[1])*eyx_Carrier*exy_Carrier - ezy_Carrier*(P8[3] - pzz_Carrier)*eyx_Carrier + ezx_Carrier*(P8[3] - pzz_Carrier)*eyy_Carrier, -ezy_Carrier*(pxx_Carrier - P8[1])*exx_Carrier + ezx_Carrier*(pxx_Carrier - P8[1])*exy_Carrier - ezy_Carrier*(pyy_Carrier - P8[2])*eyx_Carrier + ezx_Carrier*(pyy_Carrier - P8[2])*eyy_Carrier, ((pyy_Carrier - P6[2])*eyy_Carrier - ezy_Carrier*(P6[3] - pzz_Carrier))*exx_Carrier + ((P6[2] - pyy_Carrier)*eyx_Carrier + ezx_Carrier*(P6[3] - pzz_Carrier))*exy_Carrier, (P6[1] - pxx_Carrier)*eyy_Carrier*exx_Carrier + (pxx_Carrier - P6[1])*eyx_Carrier*exy_Carrier - ezy_Carrier*(P6[3] - pzz_Carrier)*eyx_Carrier + ezx_Carrier*(P6[3] - pzz_Carrier)*eyy_Carrier, -ezy_Carrier*(pxx_Carrier - P6[1])*exx_Carrier + ezx_Carrier*(pxx_Carrier - P6[1])*exy_Carrier - ezy_Carrier*(pyy_Carrier - P6[2])*eyx_Carrier + ezx_Carrier*(pyy_Carrier - P6[2])*eyy_Carrier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(-P11[3] + P12[3])/(sqrt(P11[1]^2 - 2*P11[1]*P12[1] + P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[1]^2 + P12[2]^2 + P12[3]^2)*sqrt((P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[2]^2 + P12[3]^2)/(P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[2]^2 + P12[3]^2 + (P11[1] - P12[1])^2))), -(P11[2] - P12[2])/(sqrt(P11[1]^2 - 2*P11[1]*P12[1] + P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[1]^2 + P12[2]^2 + P12[3]^2)*sqrt((P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[2]^2 + P12[3]^2)/(P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[2]^2 + P12[3]^2 + (P11[1] - P12[1])^2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(-P11[2]^2 + 2*P11[2]*P12[2] - P11[3]^2 + 2*P11[3]*P12[3] - P12[2]^2 - P12[3]^2)/(sqrt((P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[2]^2 + P12[3]^2)/(P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[2]^2 + P12[3]^2 + (P11[1] - P12[1])^2))*(P11[1]^2 - 2*P11[1]*P12[1] + P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[1]^2 + P12[2]^2 + P12[3]^2)), -(P11[2] - P12[2])*(P11[1] - P12[1])/(sqrt((P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[2]^2 + P12[3]^2)/(P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[2]^2 + P12[3]^2 + (P11[1] - P12[1])^2))*(P11[1]^2 - 2*P11[1]*P12[1] + P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[1]^2 + P12[2]^2 + P12[3]^2)), -(P11[3] - P12[3])*(P11[1] - P12[1])/(sqrt((P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[2]^2 + P12[3]^2)/(P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[2]^2 + P12[3]^2 + (P11[1] - P12[1])^2))*(P11[1]^2 - 2*P11[1]*P12[1] + P11[2]^2 - 2*P11[2]*P12[2] + P11[3]^2 - 2*P11[3]*P12[3] + P12[1]^2 + P12[2]^2 + P12[3]^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(-P5[2] + P8[2])/(sqrt(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P5[3]^2 - 2*P5[3]*P8[3] + P8[1]^2 + P8[2]^2 + P8[3]^2)*sqrt((P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2)/(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2 + (P5[3] - P8[3])^2))), -(P5[1] - P8[1])/(sqrt(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P5[3]^2 - 2*P5[3]*P8[3] + P8[1]^2 + P8[2]^2 + P8[3]^2)*sqrt((P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2)/(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2 + (P5[3] - P8[3])^2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(P5[1] - P8[1])*(P5[3] - P8[3])/(sqrt((P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2)/(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2 + (P5[3] - P8[3])^2))*(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P5[3]^2 - 2*P5[3]*P8[3] + P8[1]^2 + P8[2]^2 + P8[3]^2)), -(P5[2] - P8[2])*(P5[3] - P8[3])/(sqrt((P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2)/(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2 + (P5[3] - P8[3])^2))*(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P5[3]^2 - 2*P5[3]*P8[3] + P8[1]^2 + P8[2]^2 + P8[3]^2)), (P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2)/(sqrt((P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2)/(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2 + (P5[3] - P8[3])^2))*(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P5[3]^2 - 2*P5[3]*P8[3] + P8[1]^2 + P8[2]^2 + P8[3]^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, (-P15[1] + P14[1])/sqrt(P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P14[3]^2 - 2*P14[3]*P15[3] + P15[1]^2 + P15[2]^2 + P15[3]^2), (-P15[2] + P14[2])/sqrt(P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P14[3]^2 - 2*P14[3]*P15[3] + P15[1]^2 + P15[2]^2 + P15[3]^2), (-P15[3] + P14[3])/sqrt(P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P14[3]^2 - 2*P14[3]*P15[3] + P15[1]^2 + P15[2]^2 + P15[3]^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-P15[1] + P14[1])/sqrt(P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P14[3]^2 - 2*P14[3]*P15[3] + P15[1]^2 + P15[2]^2 + P15[3]^2), (-P15[2] + P14[2])/sqrt(P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P14[3]^2 - 2*P14[3]*P15[3] + P15[1]^2 + P15[2]^2 + P15[3]^2), (-P15[3] + P14[3])/sqrt(P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P14[3]^2 - 2*P14[3]*P15[3] + P15[1]^2 + P15[2]^2 + P15[3]^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, (P15[2] - P14[2])/(sqrt(P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P14[3]^2 - 2*P14[3]*P15[3] + P15[1]^2 + P15[2]^2 + P15[3]^2)*sqrt((P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P15[1]^2 + P15[2]^2)/(P14[1]^2 - 2*P15[1]*P14[1] + P14[2]^2 - 2*P15[2]*P14[2] + P15[1]^2 + P15[2]^2 + (-P15[3] + P14[3])^2))), (-P15[1] + P14[1])/(sqrt(P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P14[3]^2 - 2*P14[3]*P15[3] + P15[1]^2 + P15[2]^2 + P15[3]^2)*sqrt((P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P15[1]^2 + P15[2]^2)/(P14[1]^2 - 2*P15[1]*P14[1] + P14[2]^2 - 2*P15[2]*P14[2] + P15[1]^2 + P15[2]^2 + (-P15[3] + P14[3])^2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -(-P15[1] + P14[1])*(-P15[3] + P14[3])/(sqrt((P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P15[1]^2 + P15[2]^2)/(P14[1]^2 - 2*P15[1]*P14[1] + P14[2]^2 - 2*P15[2]*P14[2] + P15[1]^2 + P15[2]^2 + (-P15[3] + P14[3])^2))*(P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P14[3]^2 - 2*P14[3]*P15[3] + P15[1]^2 + P15[2]^2 + P15[3]^2)), -(-P15[2] + P14[2])*(-P15[3] + P14[3])/(sqrt((P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P15[1]^2 + P15[2]^2)/(P14[1]^2 - 2*P15[1]*P14[1] + P14[2]^2 - 2*P15[2]*P14[2] + P15[1]^2 + P15[2]^2 + (-P15[3] + P14[3])^2))*(P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P14[3]^2 - 2*P14[3]*P15[3] + P15[1]^2 + P15[2]^2 + P15[3]^2)), (P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P15[1]^2 + P15[2]^2)/(sqrt((P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P15[1]^2 + P15[2]^2)/(P14[1]^2 - 2*P15[1]*P14[1] + P14[2]^2 - 2*P15[2]*P14[2] + P15[1]^2 + P15[2]^2 + (-P15[3] + P14[3])^2))*(P14[1]^2 - 2*P14[1]*P15[1] + P14[2]^2 - 2*P14[2]*P15[2] + P14[3]^2 - 2*P14[3]*P15[3] + P15[1]^2 + P15[2]^2 + P15[3]^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(-P5[2] + P8[2])/(sqrt(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P5[3]^2 - 2*P5[3]*P8[3] + P8[1]^2 + P8[2]^2 + P8[3]^2)*sqrt((P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2)/(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2 + (P5[3] - P8[3])^2))), -(P5[1] - P8[1])/(sqrt(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P5[3]^2 - 2*P5[3]*P8[3] + P8[1]^2 + P8[2]^2 + P8[3]^2)*sqrt((P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2)/(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2 + (P5[3] - P8[3])^2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(P5[1] - P8[1])*(P5[3] - P8[3])/(sqrt((P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2)/(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2 + (P5[3] - P8[3])^2))*(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P5[3]^2 - 2*P5[3]*P8[3] + P8[1]^2 + P8[2]^2 + P8[3]^2)), -(P5[2] - P8[2])*(P5[3] - P8[3])/(sqrt((P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2)/(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2 + (P5[3] - P8[3])^2))*(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P5[3]^2 - 2*P5[3]*P8[3] + P8[1]^2 + P8[2]^2 + P8[3]^2)), (P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2)/(sqrt((P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2)/(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P8[1]^2 + P8[2]^2 + (P5[3] - P8[3])^2))*(P5[1]^2 - 2*P5[1]*P8[1] + P5[2]^2 - 2*P5[2]*P8[2] + P5[3]^2 - 2*P5[3]*P8[3] + P8[1]^2 + P8[2]^2 + P8[3]^2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]);
B116 := Vector[column](116, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, JFx_Sup_LF_R_LF_Rod, 0, 0, 0, 0, 0, 0, 0, -(-P3[1] + P6[1])*JFx_Sup_UF_R_UF_Rod/sqrt(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P3[3]^2 - 2*P3[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2), (-P3[2] + P6[2])*JFx_Sup_UF_R_UF_Rod/(sqrt((P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2))*sqrt(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P3[3]^2 - 2*P3[3]*P6[3] + P6[1]^2 + P6[2]^2 + P6[3]^2)), -(JFx_Sup_UF_R_UF_Rod*(P3[3] - P6[3])*P6[1] - JFx_Sup_UF_R_UF_Rod*(P3[3] - P6[3])*P3[1])/(sqrt((P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2)/(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2))*(P3[1]^2 - 2*P3[1]*P6[1] + P3[2]^2 - 2*P3[2]*P6[2] + P6[1]^2 + P6[2]^2 + (P3[3] - P6[3])^2)), 0, 0, 0, -(-P1[1] + P7[1])*JFx_Sup_LF_R_LF_Rod/sqrt(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P1[3]^2 - 2*P1[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2), (-P1[2] + P7[2])*JFx_Sup_LF_R_LF_Rod/(sqrt((P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2))*sqrt(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P1[3]^2 - 2*P1[3]*P7[3] + P7[1]^2 + P7[2]^2 + P7[3]^2)), -(JFx_Sup_LF_R_LF_Rod*(P1[3] - P7[3])*P7[1] - JFx_Sup_LF_R_LF_Rod*(P1[3] - P7[3])*P1[1])/(sqrt((P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2)/(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2))*(P1[1]^2 - 2*P1[1]*P7[1] + P1[2]^2 - 2*P1[2]*P7[2] + P7[1]^2 + P7[2]^2 + (P1[3] - P7[3])^2)), 0, 0, 0, JFx_Sup_UF_R_UF_Rod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -F_x, -F_y, -F_z, -M_x, -M_y, -M_z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
